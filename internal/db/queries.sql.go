// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCoach = `-- name: CreateCoach :one
INSERT INTO coach (email, name, tz)
VALUES ($1, $2, $3)
RETURNING id, email, name, tz, created_at
`

type CreateCoachParams struct {
	Email string
	Name  pgtype.Text
	Tz    string
}

func (q *Queries) CreateCoach(ctx context.Context, arg CreateCoachParams) (Coach, error) {
	row := q.db.QueryRow(ctx, createCoach, arg.Email, arg.Name, arg.Tz)
	var i Coach
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.Tz,
		&i.CreatedAt,
	)
	return i, err
}

const getCoachByEmail = `-- name: GetCoachByEmail :one
SELECT id, email, name, tz, created_at FROM coach WHERE email = $1 LIMIT 1
`

func (q *Queries) GetCoachByEmail(ctx context.Context, email string) (Coach, error) {
	row := q.db.QueryRow(ctx, getCoachByEmail, email)
	var i Coach
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.Tz,
		&i.CreatedAt,
	)
	return i, err
}

const upsertCoachByEmail = `-- name: UpsertCoachByEmail :one
INSERT INTO coach (email, name, tz)
VALUES ($1, $2, $3)
ON CONFLICT (email)
DO UPDATE SET name = COALESCE(EXCLUDED.name, coach.name)
RETURNING id, email, name, tz, created_at
`

type UpsertCoachByEmailParams struct {
	Email string
	Name  pgtype.Text
	Tz    string
}

func (q *Queries) UpsertCoachByEmail(ctx context.Context, arg UpsertCoachByEmailParams) (Coach, error) {
	row := q.db.QueryRow(ctx, upsertCoachByEmail, arg.Email, arg.Name, arg.Tz)
	var i Coach
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.Tz,
		&i.CreatedAt,
	)
	return i, err
}
